var documenterSearchIndex = {"docs":
[{"location":"base.html#Common-functions","page":"Common functions","title":"Common functions","text":"","category":"section"},{"location":"base.html","page":"Common functions","title":"Common functions","text":"Modules = [AbstractSDRs]\nPages   = [\"AbstractSDRs.jl\"];\nOrder   = [:function, :type]\nDepth   = 1","category":"page"},{"location":"base.html#AbstractSDRs.getSupportedSDRs-Tuple{}","page":"Common functions","title":"AbstractSDRs.getSupportedSDRs","text":"Returns an array of symbol which lists the supported SDR backends\n\n–- Syntax\n\nl = getSupportedSDR()\n\n–- Input parameters\n\n\n\n–- Output parameters\n\nl : Array of symbols of supported SDRs\n\n\n\n\n\n","category":"method"},{"location":"base.html#AbstractSDRs.openSDR-Tuple{Symbol,Vararg{Any,N} where N}","page":"Common functions","title":"AbstractSDRs.openSDR","text":"Open a Software Defined Radio of backend 'type', tune accordingly based on input parameters and use the supported keywords. It returns a radio object, depending on the type of SDR that can be used with all AbstractSDRs supported functions\n\n–- Syntax\n\nradio = openSDR(type,carrierFreq,samplingRate,gain,antenna;key)\n\n–- Input parameters\n\ntype  : Desired SDR type. The different supported radio format can be obtained with getSupportedSDR();\ncarrierFreq : Carrier frequency [Hz] \nsamplingRate : Sampling frequency (Hz)\ngain : Analog Rx gain (dB)\n\n–- Output parameters\n\nradio : Defined SDR object\n\n\n\n\n\n","category":"method"},{"location":"base.html#AbstractSDRs.recv!-Tuple{Any,SDROverNetwork,Vararg{Any,N} where N}","page":"Common functions","title":"AbstractSDRs.recv!","text":"Receive from the SDR and fill them in the input buffer.\n\n–- Syntax\n\nnbSamples = recv!(sig,radio);\n\n–- Input parameters\n\nsig : Buffer to be filled\nradio : SDR device\n\n–- Output parameters\n\nnbSamples : Number of samples filled \n\n\n\n\n\n","category":"method"},{"location":"base.html#AbstractSDRs.recv-Tuple{SDROverNetwork,Vararg{Any,N} where N}","page":"Common functions","title":"AbstractSDRs.recv","text":"Receive nbSamples from the SDR and fill them in the output buffer. The buffer format depends on the SDR backend\n\n–- Syntax\n\nbuffer = recv(radio, nbSamples)\n\n–- Input parameters\n\nradio : SDR object \nnbSamples : Desired number of samples \n\n–- Output parameters\n\nbuffer : Output buffer from the radio filled with nbSamples samples\n\n\n\n\n\n","category":"method"},{"location":"base.html#AbstractSDRs.updateGain!-Tuple{SDROverNetwork,Vararg{Any,N} where N}","page":"Common functions","title":"AbstractSDRs.updateGain!","text":"Update gain of current radio device, and update radio object with the new obtained gain.  If the input is a [UHDRx] or a [UHDTx] object, it updates only the Rx or Tx gain   \n\n–- Syntax\n\nupdateGain!(radio,gain)\n\n–- Input parameters\n\nradio\t  : SDR device\ngain\t: New desired gain \n\n–- Output parameters\n\n\n\n\n\n\n\n","category":"method"},{"location":"base.html#AbstractSDRs.updateSamplingRate!-Tuple{SDROverNetwork,Vararg{Any,N} where N}","page":"Common functions","title":"AbstractSDRs.updateSamplingRate!","text":"Update sampling rate of current radio device, and update radio object with the new obtained sampling frequency. \n\n–- Syntax\n\nupdateSamplingRate!(radio,samplingRate)\n\n–- Input parameters\n\nradio\t  : SDR device\nsamplingRate\t: New desired sampling rate \n\n–- Output parameters\n\n\n\n\n\n\n\n","category":"method"},{"location":"Examples/example_parameters.html#Update-parameters-of-the-radio","page":"Update parameters of the radio","title":"Update parameters of the radio","text":"","category":"section"},{"location":"Examples/example_parameters.html","page":"Update parameters of the radio","title":"Update parameters of the radio","text":"It is possible to update the radio parameter such as the gain, the bandwidth and the sampling rate.  In this function, we change the carrier frequency to 2400MHz, the bandwidth from 16MHz to 100MHz and the Rx gain from 10 to 30dB. In some cases, the desired parameters cannot be obtained. In such a case, we let UHD decide what is the most appropriate value. A warning is raised and the output of the functions used to change the  the radio parameters corresponds to the effective values of the radio. ","category":"page"},{"location":"Examples/example_parameters.html","page":"Update parameters of the radio","title":"Update parameters of the radio","text":"function main()\n\t# ---------------------------------------------------- \n\t# --- Physical layer and RF parameters \n\t# ---------------------------------------------------- \n\tcarrierFreq\t= 868e6; \t# --- The carrier frequency (Hz)\t\n\tsamplingRate\t= 16e6;         # --- Targeted bandwidth (Hz)\n\trxGain\t\t= 30.0;         # --- Rx gain (dB)\n\tnbSamples\t= 4096;         # --- Desired number of samples\n\n\t# ---------------------------------------------------- \n\t# --- Getting all system with function calls  \n\t# ---------------------------------------------------- \n\t# --- Creating the radio resource \n\tradio\t= openSDR(:uhd,carrierFreq,samplingRate,rxGain);\n\t# --- Display the current radio configuration\n\tprint(radio);\n\t# --- We what to change the parameters ! \n\tupdateSamplingFreq!(radio,100e6);\n\tupdateCarrierFreq!(radio,2400e6);\n\tupdateGain!(radio,30)\n\t# --- Print the new radio configuration \n\tprint(radio);\n\t# --- Release the radio resources\n\tclose(radio); \nend","category":"page"},{"location":"Examples/example_benchmark.html#Benchmark-for-Rx-link","page":"Benchmark for Rx link","title":"Benchmark for Rx link","text":"","category":"section"},{"location":"Examples/example_benchmark.html","page":"Benchmark for Rx link","title":"Benchmark for Rx link","text":"The following script allows to benchmark the effective rate from the receiver. To do so we compute the number of samples received in a given time. The timing is measured fro the timestamp obtained from the radio. ","category":"page"},{"location":"Examples/example_benchmark.html","page":"Benchmark for Rx link","title":"Benchmark for Rx link","text":"module Benchmark \n# ---------------------------------------------------- \n# --- Modules & Utils\n# ---------------------------------------------------- \n# --- External modules \nusing UHDBindings \n# --- Functions \n\"\"\"\nCalculate rate based on UHD timestamp\n\"\"\"\nfunction getRate(tInit,tFinal,nbSamples)\n\tsDeb = tInit.intPart + tInit.fracPart;\n\tsFin = tFinal.intPart + tFinal.fracPart; \n\ttiming = sFin - sDeb; \n\treturn nbSamples / timing;\nend\n\"\"\"\nMain call to monitor Rx rate\n\"\"\"\nfunction main(samplingRate)\t\n\t# ---------------------------------------------------- \n\t# --- Physical layer and RF parameters \n\t# ---------------------------------------------------- \n\t# --- Create the radio object in function\n\tcarrierFreq\t\t= 770e6;\t\t\n\tgain\t\t\t= 50.0; \n\tradio\t\t\t= openSDR(:uhd,carrierFreq,samplingRate,gain); \n\t# --- Print the configuration\n\tprint(radio);\n\t# --- Init parameters \n\t# Get the radio size for buffer pre-allocation\n\tnbSamples \t\t= radio.packetSize;\n\t# We will get complex samples from recv! method\n\tsig\t\t  = zeros(Complex{Cfloat},nbSamples); \n\t# --- Targeting 2 seconds acquisition\n\t# Init counter increment\n\tnS\t\t  = 0;\n\t# Max counter definition\n\tnbBuffer  = 2*samplingRate;\n\t# --- Timestamp init \n\tp \t\t\t= recv!(sig,radio);\n\tnS\t\t\t+= p;\n\ttimeInit  \t= Timestamp(getTimestamp(radio)...);\n\twhile true\n\t\t# --- Direct call to avoid allocation \n\t\tp = recv!(sig,radio);\n\t\t# --- Ensure packet is OK\n\t\terr \t= getError(radio);\n\t\t# --- Update counter\n\t\tnS\t\t+= p;\n\t\t# --- Interruption \n\t\tif nS > nbBuffer\n\t\t\tbreak \n\t\tend\n\tend\n\t# --- Last timeStamp and rate \n\ttimeFinal = Timestamp(getTimestamp(radio)...);\n\t# --- Getting effective rate \n\tradioRate\t  = radio.samplingRate;\n    effectiveRate = getRate(timeInit,timeFinal,nS);\n\t# --- Free all and return\n\tclose(radio);\n\treturn (radioRate,effectiveRate);\n    end\nend","category":"page"},{"location":"index.html#AbstractSDRs.jl","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"","category":"section"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"(Image: )","category":"page"},{"location":"index.html#Purpose","page":"AbstractSDRs.jl","title":"Purpose","text":"","category":"section"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"This package proposes a single API to monitor different kind of Software Defined Radio.  We define several SDR backends that can be piloted by the same API. With AbstractSDRs, the following SDRs can be used ","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"All Universal Software Radio Peripheral USRP, based on UHDBindings package\nRTL SDR dongle, with inclusion of RTLSDR package\nAny device connected to a remote PC with a network connection (for instance, Exxx USRP device) on which a Julia session works and run AbstractSDRs package.\nThe ADALM Pluto SDR, through a specific package (WIP) \nA pure simulation package usefull for testing without radio or do re-doing offline dataflow processing based on a given buffer ","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"AbstractSDRs provides an unified API to open, transmit and received samples and close the SDRs. ","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"For instance, in order to get 4096 samples at 868MHz with a instantaneous bandwidth of 16MHz, with a 30dB Rx Gain, assuming that a USRP is connected, the following Julia code will do the trick and returns a vector with type Complex{Cfloat} with 4096 samples.","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"function main()\n\t# ---------------------------------------------------- \n\t# --- Physical layer and RF parameters \n\t# ---------------------------------------------------- \n\n\tcarrierFreq\t\t= 868e6;\t# --- The carrier frequency \t\n\tsamplingRate\t\t= 16e6;         # --- Targeted bandwdith \n\trxGain\t\t\t= 30.0;         # --- Rx gain \n\tnbSamples\t\t= 4096;         # --- Desired number of samples\n\n\t# ---------------------------------------------------- \n\t# --- Getting all system with function calls  \n\t# ---------------------------------------------------- \n\t# --- Creating the radio ressource \n\t# The first parameter is to tune the Rx board\n\tradio\t= openSDR(\"UHDRx\",carrierFreq,samplingRate,rxGain);\n\t# --- Display the current radio configuration\n\tprint(radio);\n\t# --- Getting a buffer from the radio \n\tsig\t= recv(radio,nbSamples);\n\t# --- Release the radio ressources\n\tclose(radio); \n\t# --- Output to signal \n\treturn sig;\nend","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"Note that the SDR discrimination is done through the \"UHDRx\" parameter when opening the device, which states here that the UHD driver should be used, and that the radio will receive samples. To get the same functionnality with a RTL SDR dongle, the following code can be used.","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"function main()\n\t# ---------------------------------------------------- \n\t# --- Physical layer and RF parameters \n\t# ---------------------------------------------------- \n\n\tcarrierFreq\t\t= 868e6;\t# --- The carrier frequency \t\n\tsamplingRate\t\t= 16e6;         # --- Targeted bandwdith \n\trxGain\t\t\t= 30.0;         # --- Rx gain \n\tnbSamples\t\t= 4096;         # --- Desired number of samples\n\n\t# ---------------------------------------------------- \n\t# --- Getting all system with function calls  \n\t# ---------------------------------------------------- \n\t# --- Creating the radio ressource \n\t# The first parameter is to tune the Rx board\n\tradio\t= openSDR(\"RTLRx\",carrierFreq,samplingRate,rxGain);\n\t# --- Display the current radio configuration\n\tprint(radio);\n\t# --- Getting a buffer from the radio \n\tsig\t= recv(radio,nbSamples);\n\t# --- Release the radio ressources\n\tclose(radio); \n\t# --- Output to signal \n\treturn sig;\nend","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"Note that the only difference lies in the radio opening.","category":"page"},{"location":"index.html#Installation","page":"AbstractSDRs.jl","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"pkg> add AbstractSDRs ","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"Or, equivalently, via the Pkg API:","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"julia> import Pkg; Pkg.add(\"AbstractSDRs\")","category":"page"},{"location":"index.html#Backends","page":"AbstractSDRs.jl","title":"Backends","text":"","category":"section"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"AbstractSDRs wraps and implements different SDR backends that can be used when opening a radio device. The current list of supported SDR backends can be obtained via getSupportedSDR.  When instantiate a radio device (with openSDR), the first argument is the radio backend and parameters associated to a specific backend can be used with keywords.  Some specific functions can also be exported based in the selected backend. The list is given in the sub-backend part  ","category":"page"},{"location":"index.html#UHD-backend","page":"AbstractSDRs.jl","title":"UHD backend","text":"","category":"section"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"AbstractSDRs can be used with Universal Radio Peripheral (USRP) with the use of UHDBindings.jl package. The backend is identified by the symbol :uhd. This backend supports ths following keywords ","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"args=\"\" to specify any UHD argument in initialisation. Please refer to the UHD doc. For instance, FPGA bitstream path can be specified with args=\"fgpa=path/to/image.bit\". The IP address of the USRP can be added with args=\"addr=192.168.10.xx\".   ","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"AbstractSDRs package also exports the following specific functions","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"NONE. ","category":"page"},{"location":"index.html#RadioSim","page":"AbstractSDRs.jl","title":"RadioSim","text":"","category":"section"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"This backend is useful when one wants to test a processing chain without having a radio as it simulates the behaviour of a SDR (configuration and buffer management). It is also useful when you have some acquisition in a given file (or buffer) as we can give the radio device a buffer which is then used to provide samples (as recv gives chunk of this buffer based on the desired size in a circular manner).      This backend supports ths following keywords","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"packetSize to specify the size of each packet given by the radio. By default the value is 1024 complex samples \nbuffer to give to the radio a buffer to be used when emulating the reception. The following rules occur \nIf packetSize is not given, the provided buffer will be buffer each time the recv command is used\nIf packetSize is higher than the size of the proposed buffer, the buffer will be circulary copied to provive packetSize complex samples \nIf packetSize is lower than the size of the proposed buffer, recv will returns packetSize samples from buffer and the buffer will be browsed cicularly \nIf no buffer is given, packetSize random data will be generated at the init of the radio and proposed each time recvis called","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"AbstractSDRs package also exports the following specific functions related to RadioSims","category":"page"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"updatePacketSize to update the size of the radio packet. \nupdateBuffer to update the radio buffer ","category":"page"},{"location":"index.html#Pluto","page":"AbstractSDRs.jl","title":"Pluto","text":"","category":"section"},{"location":"index.html","page":"AbstractSDRs.jl","title":"AbstractSDRs.jl","text":"This backend can be used with ADALM Pluto SDR device. ","category":"page"},{"location":"index.html#SDROverNetworks","page":"AbstractSDRs.jl","title":"SDROverNetworks","text":"","category":"section"},{"location":"Examples/example_setup.html#Set-up-a-Radio-Link-and-get-some-samples","page":"Set up a Radio Link and get some samples","title":"Set up a Radio Link and get some samples","text":"","category":"section"},{"location":"Examples/example_setup.html","page":"Set up a Radio Link and get some samples","title":"Set up a Radio Link and get some samples","text":"We use a UHD based device. In order to get 4096 samples at 868MHz with a instantaneous bandwidth of 16MHz, with a 30dB Rx Gain, the following Julia code should do the trick. ","category":"page"},{"location":"Examples/example_setup.html","page":"Set up a Radio Link and get some samples","title":"Set up a Radio Link and get some samples","text":"function main()\n\t# ---------------------------------------------------- \n\t# --- Physical layer and RF parameters \n\t# ---------------------------------------------------- \n\tcarrierFreq\t= 868e6; \t# --- The carrier frequency (Hz)\t\n\tsamplingRate\t= 16e6;         # --- Targeted bandwidth (Hz)\n\trxGain\t\t= 30.0;         # --- Rx gain (dB)\n\tnbSamples\t= 4096;         # --- Desired number of samples\n\n\t# ---------------------------------------------------- \n\t# --- Getting all system with function calls  \n\t# ---------------------------------------------------- \n\t# --- Creating the radio resource \n\tradio\t= openSDR(:uhd,carrierFreq,samplingRate,rxGain);\n\t# --- Display the current radio configuration\n\tprint(radio);\n\t# --- Getting a buffer from the radio \n\tsigAll\t= recv(radio,nbSamples);\n\t# --- Release the radio resources\n\tclose(radio); \nend","category":"page"}]
}
